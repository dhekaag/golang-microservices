services:
  redis:
    image: redis:8-alpine
    container_name: microservices-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 3
      interval: 1m
    command: redis-server --appendonly yes

  user-service:
    build:
      context: ../
      dockerfile: services/user-service/Dockerfile
    container_name: user-service
    ports:
      - "8081:8081"
    env_file:
      - ../services/user-service/.env
    environment:
      # Redis (containerized)
      - REDIS_ADDR=microservices-redis:6379
      # Service URLs
      - USER_SERVICE_URL=http://user-service:8081
      - API_GATEWAY_URL=http://api-gateway:8080
      # External MySQL database
      - DB_HOST=host.docker.internal
      - DB_MAX_IDLE_CONNS=25
      - DB_MAX_OPEN_CONNS=200
      - DB_CONN_MAX_LIFETIME=30m
      - DB_CONN_MAX_IDLE_TIME=5m
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - microservices-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8081/health",
        ]
      timeout: 10s
      retries: 5
      interval: 1m
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  api-gateway:
    build:
      context: ../
      dockerfile: services/api-gateway/Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    env_file:
      - ../services/api-gateway/.env
    environment:
      # Service URLs
      - USER_SERVICE_URL=http://user-service:8081
      - PRODUCT_SERVICE_URL=http://product-service:8082
      - ORDER_SERVICE_URL=http://order-service:8083
      - REDIS_ADDR=microservices-redis:6379
      - DB_HOST=host.docker.internal

    depends_on:
      user-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - microservices-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8080/health",
        ]
      timeout: 10s
      retries: 5
      interval: 1m
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis management tool

volumes:
  redis_data:
    driver: local

networks:
  microservices-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
